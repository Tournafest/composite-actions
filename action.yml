name: Deploy to Amazon EKS
description: 'Deploy to Amazon EKS'

inputs:
  env-file:  # id of input
    description: '.env file separated by `;`'
    required: true
  firebase-json: 
    description: 'Firebase JSON'
    required: true
  aws-access-key:
    description: 'AWS Access Key'
    required: true
  aws-secret-key:
    description: 'AWS Secret Key'
    required: true
  aws-region:
    description: 'AWS Region'
    required: true
  aws-eks-cluster-name:
    description: 'AWS EKS Cluster Name'
    required: true
  kubernetes-subfolder:
    description: 'Kubernetes Subfolder'
    required: true

runs:
  using: "composite"
  steps:
      - uses: actions/checkout@v2
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Write env-file to a .env file
        run:  echo $ENV_FILE > .env && sed -i 's/\;/\n/g' .env 
        shell: bash
        env:
          ENV_FILE: ${{ inputs.env-file }}
          
      - name: Write firebase-json to a firebase.json file 
        run:  echo $FIREBASE_JSON > firebase.json
        shell: bash
        env:
          FIREBASE_JSON: ${{ inputs.firebase-json }}
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.aws-access-key }}
          aws-secret-access-key: ${{ inputs.aws-secret-key }}
          aws-region: ${{ inputs.aws-region }}
      
      - name: Use old version of kubectl
        shell: bash
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl 
          mv ./kubectl ~/kubectl
          chmod u+x ~/kubectl

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create a ECR repo
        shell: bash
        run: |
          aws ecr describe-repositories --repository-names ${{ github.event.repository.name }} || ( aws ecr create-repository --repository-name ${{ github.event.repository.name }}  && aws ecr put-lifecycle-policy --repository-name ${{ github.event.repository.name }} --lifecycle-policy-text "{\"rules\":[{\"rulePriority\":1,\"description\":\"Keep last 5 images\",\"selection\":{\"tagStatus\":\"any\",\"countType\":\"imageCountMoreThan\",\"countNumber\":5},\"action\":{\"type\":\"expire\"}}]}"  )

      - name: Set up Docker Buildx                             
        id: buildx                                             
        uses: docker/setup-buildx-action@master

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}.${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg ENV=$ENV .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        shell: bash

      - name: Set up Kustomize
        id: setup-kustomize
        run: |-
          curl -sfLo ~/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ~/kustomize
        shell: bash

      # NOTE: Deleting the jobs is not best idea, that is the current solution we are using
      - name: Deploy to EKS
        id: deploy-eks
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}.${{ github.run_number }}
          AWS_REGION: ${{ inputs.aws-region }}
          AWS_EKS_CLUSTER_NAME: ${{ inputs.aws-eks-cluster-name }}
          NAMESUFFIX: ${{ github.sha }}
        run: |-
          cd kubernetes/${{ inputs.kubernetes-subfolder }}
          aws eks update-kubeconfig --name ${AWS_EKS_CLUSTER_NAME}
          ~/kustomize edit set image nginx=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          ~/kubectl delete --ignore-not-found=true -f jobs.yaml
          ~/kustomize build . | ~/kubectl apply -f -
        shell: bash
